---
title: Using SMB Volumes in .NET Apps
owner: Windows
---

<strong><%= modified_date %></strong>

This topic describes how to use SMB Volumes in a .NET Application. Using an example application, we create an application that reads and writes to an <code>note.txt</code> file, within a SMB Volume.


## <a id='prerequisites'></a>Prerequisites 

The following are required to utilize SMB Volumes:
<ul>
<li>Azure account</li>
<li>An accessible SMB Volume in Azure Cloud with a UNC path</li>
    <ul>
	<li>If you don’t have an accessible SMB Volume, refer to Create a file share in Azure Files in the Azure documentation.</li>
    </ul>
<li>SMB Username</li>
<li>SMB Password</li>
</ul>

## <a id='steeltoe'></a> Using SMB Volumes in .NET Apps with Steeltoe
Steeltoe is a set of client libraries. Pivotal encourages using Steeltoe in SMB Mounting, as doing so enables your application to be cloud native.
However, you can utilize SMB Mounting with or without Steeltoe.
Using Steeltoe requires modifying your application code.
If you do not wish to modify your application code, proceed without using Steeltoe. For more information, see the <a href="https://steeltoe.io/docs/">Steeltoe Documentation</a>.

## <a id='smb-mounting'></a>SMB Mounting
<ol>
<li>Using CF CLI or Apps Manager, add <code>SMB_PATH</code>, <code>SMB_USERNAME</code>, and <code>SMB_PASSWORD</code>  as environment variables to your local computer or the computer you are deploying to: 
</br>
</br>
	Where:
	<ul>
	<li><code>SMB_PATH</code> is the path to your SMB.
    <ul>
    <li>If you are using the Windows 1709 Stemcell, your UNC is the IP of the machine you are using.</li>
    <li>If you are using the Windows 1803 Stemcell, your UNC is the FQDN of the machine you are using.</li>
    </ul>
	<li><code>SMB_USERNAME</code> is your Azure account username.</li>
	<li><code>SMB_PASSWORD</code> is  is your Azure account password.</li>
	</ul>
</br>
If you are using Steeltoe:
<ul>
<li>Add the environment variables to the config server. For more information, see <a href="https://steeltoe.io/docs/steeltoe-configuration/#2-0-config-server-provider">Config Server Provider</a> in the Steeltoe documentation.</li>
</br>
</ul>
If you are not using Steeltoe:
<ul>
<li>Add the following to your <code>.profile.bat</code>: <code>net use z: %SMB-PATH% %SMB-PASSWORD% /USER:SMB-USERNAME%</code></li>
</ul>
<p class="note"><strong>Note:</strong> If Visual Studio does not detect these new environment variables, restart Visual Studio.
</p>
<li> In Visual Studio, create a new file in your solution named <code>SMBConfiguration.cs</code>. This file is the single representation of your SMB Volume configuration and reads the connection data from the environment variables you established in the previous step.

<pre>
// SMBConfiguration.cs
using System;

namespace NetFrameworkApp.Controllers
{
    public class SMBConfiguration
    {
        public String GetSharePath()
        {
            return Environment.GetEnvironmentVariable("SMB_PATH");
        }

        public String GetUserName()
        {
            return Environment.GetEnvironmentVariable("SMB_USERNAME");
        }

        public String GetPassword()
        {
            return Environment.GetEnvironmentVariable("SMB_PASSWORD");
        }
    }
}
</pre>
<li> In Visual studio, create a new MVC Controller named <code>NoteController</code>. This file creates a controller endpoint that reads a the example note file.
<li>Modify <code>NoteController.cs</code> in the following ways:</li>
<ul>
<li> Add <code>Steeltoe.Common</code> and <code>Steeltoe.Common.Net</code > to your application with a Package Manager of your choice. If you are not using Steeltoe, ignore this step.
<li> Add the code to read from a file named <code>note.txt</code>, which does not exist yet but <code>FileMode.OpenOrCreate</code> allows it to be created. Refer to the example code snippet below which reads the contents of the note file and stashes the <code>note.txt</code> content in the Viewbag.
<pre>
// NoteController.cs
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using Steeltoe.Common.Net;

namespace NetFrameworkApp.Controllers
{
    public class NoteController : Controller
    {
        SMBConfiguration configuration = new SMBConfiguration();
        public ActionResult Index()
        {

            var credential = new NetworkCredential(configuration.GetUserName(), configuration.GetPassword());

            using (var share = new WindowsNetworkFileShare(configuration.GetSharePath(), credential))
            using (var inputStream = new FileStream(Path.Combine(configuration.GetSharePath(), "note.txt"), FileMode.OpenOrCreate))
            using (var streamReader = new StreamReader(inputStream))
            {
	    // Never display raw user input as HTML. Don’t do this in production code.
                ViewBag.Note = streamReader.ReadToEnd();
            }


            return View();
        }
    }
}
</pre>
</ul>
<li>In Visual Studio, create a subdirectory in <code>Views</code> named <code>Note</code>.</li>
<li>In Visual Studio, create a new View named <code>Index</code>.</li>
<li>In Visual Studio, create a <code>Index.cshtml</code> file that contains the following:</li>
<pre>
// Index.cshtml

@ViewBag.Note
</pre>
Running the application now would show an empty page with no errors.
</br> 
<li>Modify the <code>Index.cshtml</code> file to contain a form. This form posts to a yet to be created update endpoint and also displays our note inside a text area.</li>
<pre>
<big>
<xmp>
// Index.cshtml
...
<form action="/note/update" method="post">    
    <textarea name="note">@ViewBag.Note</textarea>    
    <div>
        <button type="submit">Update</button>
    </div>
</form>
</xmp>
</big>
</pre>

<li>Modify the <code>NoteController.cs</code> to have an update endpoint. This endpoint saves the data posted to the endpoint back into the <code>note.txt</code>. Refer to the example code snippet below.
</li>
<li>Modify the <code>NoteController.cs</code> to include the ControllerBase class <code>RedirectToAction</code> method, which redirects to the index page so the user can see what was just saved. Refer to the example code snippet below. For more infromation, see the <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.controllerbase.redirecttoaction?view=aspnetcore-2.2">Microsoft .NET API Browser Documentation</a></li>
<pre>
// NoteController.cs
namespace NetFrameworkApp.Controllers
{
    public class NoteController : Controller
    {
      ...

        [HttpPost]
        public ActionResult Update(String note)
        {
            var credential = new NetworkCredential(configuration.GetUserName(), configuration.GetPassword());

            using (var share = new WindowsNetworkFileShare(configuration.GetSharePath(), credential))
            using (var outputStream = new FileStream(Path.Combine(configuration.GetSharePath(), "note.txt"), FileMode.Create))
            using (var streamWriter = new StreamWriter(outputStream))
            {
                streamWriter.Write(note);
            }

            return RedirectToAction("Index");
        }
    }
}
</pre>
</ol>